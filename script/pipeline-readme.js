'use strict';

var fs = require('fs');
var path = require('path');
var util = require('util');
var dox = require('dox');
var trim = require('trim');
var remark = require('remark');
var rehype = require('rehype');
var u = require('unist-builder');
var vfile = require('to-vfile');
var trough = require('trough');
var author = require('parse-author');
var strip = require('strip-indent');

var pkg = require(path.join(__dirname, '..', 'package'));

module.exports = trough()
  .use(function (ctx, next) {
    vfile.read(path.join(ctx.root, 'package.json'), function (err, file) {
      ctx.config = file ? JSON.parse(String(file)) : {};
      next(err);
    });
  })
  .use(function (ctx, next) {
    vfile.read(path.join(ctx.root, 'index.js'), function (err, script) {
      var comments;

      if (err) {
        next(err.code === 'ENOENT' ? null : err);
      } else {
        ctx.script = script;

        comments = dox.parseComments(String(script))[0] || {};

        (comments.tags || []).forEach(function (comment) {
          ctx.config[comment.type] = comment.string;
        });

        next();
      }
    });
  })
  .use(function (ctx) {
    var config = ctx.config;
    var description = config.fileoverview || config.description;
    var licensee = author(config.author);
    var example = config.example;
    var opts;

    if (description.charAt(description.length - 1) !== '.') {
      description += '.';
    }

    var tree = [
      u('html', '<!--This file is generated by `build-packages.js`-->'),
      u('heading', {depth: 1}, [u('text', config.name)])
    ];

    tree = tree.concat(remark().parse(strip(description)).children);

    tree.push(
      u('heading', {depth: 2}, [u('text', 'Install')]),
      u('code', {lang: 'sh'}, 'npm install ' + config.name)
    );

    if (example && ctx.script) {
      opts = example.slice(0, example.indexOf('\n'));

      if (trim(opts)) {
        try {
          opts = JSON.parse(opts);
          example = example.slice(example.indexOf('\n') + 1);
        } catch (err) {
          opts = {};
        }
      }

      example = strip(example);

      tree.push(u('heading', {depth: 2}, [u('text', 'Example')]));

      if (opts.plugin) {
        tree.push(u('paragraph', [
          u('text', 'With '),
          u('inlineCode', util.inspect(opts.plugin)),
          u('text', ' as options.')
        ]));
      }

      tree.push(
        u('heading', {depth: 5}, [u('text', 'In')]),
        u('code', {lang: 'html'}, example),
        u('heading', {depth: 5}, [u('text', 'Out')])
      );

      tree.push(u('code', {lang: 'html'}, trim(rehype()
        .data('settings', opts.processor || {fragment: true})
        .use(require(ctx.script.path), opts.plugin || undefined)
        .processSync(example)
        .toString())
      ));
    }

    tree.push(
      u('heading', {depth: 2}, [u('text', 'License')]),
      u('paragraph', [
        u('link', {url: pkg.repository + '/blob/master/LICENSE'}, [u('text', config.license)]),
        u('text', ' Â© '),
        u('link', {url: licensee.url}, [u('text', licensee.name)])
      ])
    );

    ctx.readme = vfile(path.join(ctx.root, 'readme.md'));
    ctx.readme.contents = remark().stringify(u('root', tree), ctx.readme);
  })
  .use(function (ctx, next) {
    fs.writeFile(ctx.readme.path, String(ctx.readme), next);
  })
  .use(function (ctx) {
    ctx.readme.stored = true;
  });
